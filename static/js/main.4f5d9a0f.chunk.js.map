{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["INITIAL_STATE","name","App","state","contacts","resetForm","setState","handleCange","target","value","handleSubmit","e","preventDefault","prevState","id","nanoid","this","className","action","onSubmit","htmlFor","type","placeholder","pattern","title","required","onChange","map","contact","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAIMA,EAAgB,CAAEC,KAAM,IAExBC,E,4MACJC,MAAQ,CAAEC,SAAU,GAAIH,KAAM,I,EAE9BI,UAAY,WACV,EAAKC,SAASN,I,EAGhBO,YAAc,YAAiB,IAAdC,EAAa,EAAbA,OACPP,EAAgBO,EAAhBP,KAAMQ,EAAUD,EAAVC,MAEd,EAAKH,SAAL,eAAiBL,EAAOQ,K,EAG1BC,aAAe,SAAAC,GACbA,EAAEC,iBAEF,EAAKN,UAAS,SAAAO,GACZ,MAAO,CAAET,SAAS,GAAD,mBAAMS,EAAUT,UAAhB,CAA0B,CAAEU,GAAIC,cAAUd,KAAM,EAAKE,MAAMF,YAG9E,EAAKI,a,4CAGP,WACE,MAA2BW,KAAKb,MAAxBC,EAAR,EAAQA,SAAUH,EAAlB,EAAkBA,KAElB,OACE,sBAAKgB,UAAU,MAAf,UACE,2CACA,uBAAMC,OAAO,IAAIC,SAAUH,KAAKN,aAAhC,UACE,uBAAOU,QAAQ,OAAf,mBACA,uBACEN,GAAG,OACHO,KAAK,OACLpB,KAAK,OACLqB,YAAY,aACZC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRhB,MAAOR,EACPyB,SAAUV,KAAKT,cAGjB,wBAAQc,KAAK,SAAb,yBACA,0CACA,6BACGjB,EAASuB,KAAI,SAAAC,GACZ,OAAO,6BAAwBA,EAAQ3B,MAAvB2B,EAAQ3B,qB,GA/CpB4B,aAwDH3B,IClDA4B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4f5d9a0f.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport './App.css';\n\nconst INITIAL_STATE = { name: '' };\n\nclass App extends Component {\n  state = { contacts: [], name: '' };\n\n  resetForm = () => {\n    this.setState(INITIAL_STATE);\n  };\n\n  handleCange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.setState(prevState => {\n      return { contacts: [...prevState.contacts, { id: nanoid(), name: this.state.name }] };\n    });\n\n    this.resetForm();\n  };\n\n  render() {\n    const { contacts, name } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <form action=\"#\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={this.handleCange}\n          />\n\n          <button type=\"submit\">Add contact</button>\n          <h2>Contacts</h2>\n          <ul>\n            {contacts.map(contact => {\n              return <li key={contact.name}>{contact.name}</li>;\n            })}\n          </ul>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}