{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["INITIAL_FORM_STATE","name","number","App","state","contacts","filter","resetForm","setState","handleCange","target","value","handleSubmit","e","preventDefault","prevState","id","nanoid","this","className","action","onSubmit","htmlFor","type","placeholder","pattern","title","required","onChange","contact","includes","map","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6SAIMA,EAAqB,CAAEC,KAAM,GAAIC,OAAQ,IAEzCC,E,4MACJC,MAAQ,CAAEC,SAAU,GAAIJ,KAAM,GAAIC,OAAQ,GAAII,OAAQ,I,EAEtDC,UAAY,WACV,EAAKC,SAASR,I,EAGhBS,YAAc,YAAiB,IAAdC,EAAa,EAAbA,OACPT,EAAgBS,EAAhBT,KAAMU,EAAUD,EAAVC,MAEd,EAAKH,SAAL,eAAiBP,EAAOU,K,EAG1BC,aAAe,SAAAC,GACbA,EAAEC,iBAEF,EAAKN,UAAS,SAAAO,GACZ,MAAO,CACLV,SAAS,GAAD,mBACHU,EAAUV,UADP,CAEN,CAAEW,GAAIC,cAAUhB,KAAM,EAAKG,MAAMH,KAAMC,OAAQ,EAAKE,MAAMF,cAKhE,EAAKK,a,4CAGP,WACE,MAA2CW,KAAKd,MAAxCC,EAAR,EAAQA,SAAUJ,EAAlB,EAAkBA,KAAMC,EAAxB,EAAwBA,OAAQI,EAAhC,EAAgCA,OAEhC,OACE,sBAAKa,UAAU,MAAf,UACE,2CACA,uBAAMC,OAAO,IAAIC,SAAUH,KAAKN,aAAhC,UACE,uBAAOU,QAAQ,OAAf,mBACA,uBACEN,GAAG,OACHO,KAAK,OACLtB,KAAK,OACLuB,YAAY,aACZC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,EACRhB,MAAOV,EACP2B,SAAUV,KAAKT,cAEjB,uBAAOa,QAAQ,SAAf,qBACA,uBACEN,GAAG,SACHO,KAAK,MACLtB,KAAK,SACLwB,QAAQ,yFACRD,YAAY,cACZE,MAAM,+FACNC,UAAQ,EACRhB,MAAOT,EACP0B,SAAUV,KAAKT,cAGjB,wBAAQc,KAAK,SAAb,yBACA,0CACA,sDACA,uBACEA,KAAK,OACLtB,KAAK,SACLuB,YAAY,aACZb,MAAOL,EACPsB,SAAUV,KAAKT,cAEjB,6BACGJ,EACEC,QAAO,SAAAuB,GAAO,OAAIA,EAAQ5B,KAAK6B,SAASxB,MACxCyB,KAAI,SAAAF,GACH,OACE,+BACGA,EAAQ5B,KADX,IACkB4B,EAAQ3B,SADjB2B,EAAQ5B,qB,GA3EjB+B,aAuFH7B,ICjFA8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.69ce105c.chunk.js","sourcesContent":["import { Component } from 'react';\nimport { nanoid } from 'nanoid';\nimport './App.css';\n\nconst INITIAL_FORM_STATE = { name: '', number: '' };\n\nclass App extends Component {\n  state = { contacts: [], name: '', number: '', filter: '' };\n\n  resetForm = () => {\n    this.setState(INITIAL_FORM_STATE);\n  };\n\n  handleCange = ({ target }) => {\n    const { name, value } = target;\n\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    this.setState(prevState => {\n      return {\n        contacts: [\n          ...prevState.contacts,\n          { id: nanoid(), name: this.state.name, number: this.state.number },\n        ],\n      };\n    });\n\n    this.resetForm();\n  };\n\n  render() {\n    const { contacts, name, number, filter } = this.state;\n\n    return (\n      <div className=\"App\">\n        <h1>Phonebook</h1>\n        <form action=\"#\" onSubmit={this.handleSubmit}>\n          <label htmlFor=\"name\">Name:</label>\n          <input\n            id=\"name\"\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Enter name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={this.handleCange}\n          />\n          <label htmlFor=\"number\">Number:</label>\n          <input\n            id=\"number\"\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            placeholder=\"Enter phone\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={this.handleCange}\n          />\n\n          <button type=\"submit\">Add contact</button>\n          <h2>Contacts</h2>\n          <p>Find contacts by name</p>\n          <input\n            type=\"text\"\n            name=\"filter\"\n            placeholder=\"Enter name\"\n            value={filter}\n            onChange={this.handleCange}\n          ></input>\n          <ul>\n            {contacts\n              .filter(contact => contact.name.includes(filter))\n              .map(contact => {\n                return (\n                  <li key={contact.name}>\n                    {contact.name}:{contact.number}\n                  </li>\n                );\n              })}\n          </ul>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}